// Code generated by MockGen. DO NOT EDIT.
// Source: organization_service.go

// Package mock_services is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIOrganizationService is a mock of IOrganizationService interface
type MockIOrganizationService struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizationServiceMockRecorder
}

// MockIOrganizationServiceMockRecorder is the mock recorder for MockIOrganizationService
type MockIOrganizationServiceMockRecorder struct {
	mock *MockIOrganizationService
}

// NewMockIOrganizationService creates a new mock instance
func NewMockIOrganizationService(ctrl *gomock.Controller) *MockIOrganizationService {
	mock := &MockIOrganizationService{ctrl: ctrl}
	mock.recorder = &MockIOrganizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOrganizationService) EXPECT() *MockIOrganizationServiceMockRecorder {
	return m.recorder
}

// GetValidator mocks base method
func (m *MockIOrganizationService) GetValidator(organizationId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", organizationId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator
func (mr *MockIOrganizationServiceMockRecorder) GetValidator(organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockIOrganizationService)(nil).GetValidator), organizationId)
}

// GetFeedSecret mocks base method
func (m *MockIOrganizationService) GetFeedSecret(organizationId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedSecret", organizationId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedSecret indicates an expected call of GetFeedSecret
func (mr *MockIOrganizationServiceMockRecorder) GetFeedSecret(organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedSecret", reflect.TypeOf((*MockIOrganizationService)(nil).GetFeedSecret), organizationId)
}
